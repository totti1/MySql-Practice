{
  "_from": "call-stack",
  "_id": "call-stack@0.0.2",
  "_inBundle": false,
  "_integrity": "sha1-kEwJ+O5KnOusQX3t1HeSJg6dAbw=",
  "_location": "/call-stack",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "call-stack",
    "fetchSpec": "latest",
    "name": "call-stack",
    "raw": "call-stack",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/call-stack/-/call-stack-0.0.2.tgz",
  "_shasum": "904c09f8ee4a9cebac417dedd47792260e9d01bc",
  "_shrinkwrap": null,
  "_spec": "call-stack",
  "_where": "C:\\Users\\User\\WebstormProjects\\vivante",
  "author": {
    "email": "Finley.Z.M.F@qq.com",
    "name": "Finley.Z.M.F"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "call-stack module (originally by Finley.Z.M.F)",
  "devDependencies": {},
  "keywords": [
    "alloc",
    "call-stack",
    "callstack",
    "pointer",
    "simple",
    "stack"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "call-stack",
  "optionalDependencies": {},
  "readme": "call-stack\r\n==========\r\n\r\n> call-stack module (originally by Finley.Z.M.F)\r\n> current version: **v0.0.1**\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n\tnpm install call-stack\r\n\r\nExample\r\n-------\r\n\r\n```\r\nvar stack = require('call-stack')();\r\n\r\nstack.push('item0', 'item1');\r\nstack.push('item2');\r\n\r\nstack.each(function(val, i) {\r\n  console.log('pointer %d: %s', i, val);\r\n});\r\n\r\nstack.pointer = 0;\r\nconsole.log('set pointer to %d', stack.pointer);\r\n\r\nstack.alloc('123'); // output: item0\r\nstack.alloc('123'); // output: item1\r\nstack.alloc('123'); // output: item2\r\nstack.alloc('123'); // output: 123\r\n```\r\n\r\n\r\nAPI\r\n---\r\n\r\n### Factory: Callstack([name][, maxLayers][, constructor])\r\n\r\n- name **String** Default='anonymous'\r\n- maxLayers **Number** Default=10\r\n- constructor **Function**\r\n\r\nThe **factory** function to create a new call-stack object.\r\nReturns call-stack, used to chain calls.\r\n\r\nSet the call-stack name to `name`.\r\nUse `maxLayers` to limit the length of the call-stack layers.\r\nIf you call the `stack.alloc`, might be executed constructor.\r\n\r\n\r\n#### stack.setMaxLayers(n)\r\n\r\n- n **Number**\r\n\r\nLimit the length of the call-stack layers.\r\nIf `n` is't a positive number, throws a type error.\r\nReturns call-stack, used to chain calls.\r\n\r\n#### stack.previous()\r\n\r\nReturns the call-stack previous layer.\r\nSee `Getter: Interface.__previous`.\r\n\r\n\r\n#### stack.current()\r\n\r\nReturns the call-stack current layer.\r\nSee `Getter: Interface.__current`.\r\n\r\n\r\n#### stack.next()\r\n\r\nReturns the call-stack next layer.\r\nSee `Getter: Interface.__next`.\r\n\r\n\r\n#### stack.end()\r\n\r\nReturns the call-stack current layer.\r\nSee `Getter: Interface.__end`.\r\n\r\n\r\n#### stack.reset(n)\r\n\r\nReturns the call-stack current layer.\r\nSee `Setter: Interface.pointer`.\r\n\r\n\r\n\r\n#### stack.push(payer[, ...])\r\n\r\n- layer **Mixed**\r\n\r\nAppend the stack layers.\r\nReturns call-stack, used to chain calls.\r\n\r\n\r\n#### stack.each(iterate[, context])\r\n\r\n- iterate **Function**\r\n- context **Mixed**\r\n     \r\nBy moving the stack pointer to traverse the stack layers.\r\nReturns false if the iterator will break through.\r\nIf we want to continue to walk through, this stack pointer must move one step to the right.\r\nIf `iterate` is't a function, throw a type error.\r\n\r\n\r\n#### stack.alloc([...])\r\n\r\nAllocate stack layers.\r\n\r\nWhen the stack layer assignment is completed, if you configured a constructor for the call-stack the parameters of this method could be used on the stack constructor.\r\n\r\nReturns a call-stack layer or a results of ran constructors.\r\n\r\n\r\n#### Getter and Setter\r\n\r\nSee `Callstack.Interface`.\r\n\r\n\r\n### Interface: Callstack.Interface([name][, functional])\r\n\r\n- name **String** Default='anonymous'\r\n- functional **Function**\r\n\r\nThis interface function only for the basic properties of a call-stack object.\r\n\r\nSet the call-stack name to `name`.\r\nUse `functional` to extend the properties and methods of the call-stack.\r\n\r\n\r\n#### Getter: stack.name\r\n\r\nThe name of call-stack.\r\nIt is a **string** type.\r\n\r\n\r\n#### Getter: stack.length\r\n\r\nThe length of the call-stack.\r\nIt is a **number** type.\r\n\r\n#### Getter: stack.pointer\r\n \r\nThe pointer position of the call-stack.\r\nIt is a **number** type.\r\n\r\n#### Setter: stack.pointer = n\r\n\r\n- n Number\r\n\r\nConfigure the stack pointer.\r\nIf `n` is't a positive number or `n` is invalid for the pointer position, throw a type error.\r\n\r\n\r\n#### Getter: stack.isEnd\r\n\r\nThis value is true, if moved pointer to the end of the call-stack.\r\nIt is a **boolean** type.\r\n\r\n\r\n#### Getter: stack.isInvalid\r\n\r\nThis value is true, if the pointer is invalid.\r\nIt is a **boolean** type.\r\n\r\n\r\n#### Getter: stack.__previous\r\n\r\nThe previous call-stack layer.\r\nThe stack pointer is not in the starting position, referencing the property, this stack pointer will move one step to the left.\r\n\r\n\r\n#### Getter: stack.__current\r\n\r\nThe current call-stack layer.\r\n\r\n\r\n#### Getter: stack.__next\r\n\r\nThe next call-stack layer.\r\nThe stack pointer is not in the starting position, referencing the property, this stack pointer will move one step to the right.\r\n\r\n#### Getter: stack.__end\r\n\r\nThe last call-stack layer.\r\nThe stack pointer is not in the starting position, referencing the property, this stack pointer will move to the end.\r\n\r\n#### Setter: stack.__append\r\n\r\nAppend the call-stack layer.\r\nIf the call-stack has one or more layers, this call-stack pointer will move one step to the right.\r\n\r\n\r\n### License\r\n\r\nCallstack is licensed under the MIT license.\r\n\r\n\tCopyright(c) 2015 Finley.Z.M.F\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining\r\n\ta copy of this software and associated documentation files (the\r\n\t'Software'), to deal in the Software without restriction, including\r\n\twithout limitation the rights to use, copy, modify, merge, publish,\r\n\tdistribute, sublicense, and/or sell copies of the Software, and to\r\n\tpermit persons to whom the Software is furnished to do so, subject to\r\n\tthe following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be\r\n\tincluded in all copies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n\tEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n\tMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n\tIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n\tCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n\tTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n\tSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://git.coding.net/zmf/call-stack.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "version": "0.0.2"
}
